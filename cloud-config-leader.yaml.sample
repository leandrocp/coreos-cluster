#cloud-config
# https://discovery.etcd.io/new?size=3

coreos:
  etcd:
    discovery: https://discovery.etcd.io/31aae2be0720dfb47053f12929427db9
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  fleet:
    metadata: role=leader,channel=stable
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: consul.service
      command: start
      content: |
        [Unit]
        Description=Consul Server
        After=docker.service
        [Service]
        TimeoutSec=5min
        RestartSec=3min
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill %p
        ExecStartPre=-/usr/bin/docker rm %p
        ExecStartPre=/usr/bin/docker pull progrium/consul
        ExecStart=/bin/sh -c "exec /usr/bin/docker run \
          --name %p \
          --hostname %H \
          -p $COREOS_PRIVATE_IPV4:8300:8300 \
          -p $COREOS_PRIVATE_IPV4:8301:8301 \
          -p $COREOS_PRIVATE_IPV4:8301:8301/udp \
          -p $COREOS_PRIVATE_IPV4:8302:8302 \
          -p $COREOS_PRIVATE_IPV4:8302:8302/udp \
          -p $COREOS_PRIVATE_IPV4:8400:8400 \
          -p $COREOS_PRIVATE_IPV4:8500:8500 \
          -p $(ifconfig docker0 | grep 'inet ' | awk '{print $2}'):53:53 \
          -p $(ifconfig docker0 | grep 'inet ' | awk '{print $2}'):53:53/udp \
          -e SERVICE_IGNORE=true \
          -v /var/run/docker.sock:/var/run/docker.sock \
          progrium/consul \
          -server \
          -ui-dir /ui \
          -advertise $COREOS_PRIVATE_IPV4 \
          -bootstrap-expect 3"
        ExecStop=/usr/bin/docker stop %p
        SyslogIdentifier=%p
        SuccessExitStatus=1
        [X-Fleet]
        Global=true
        MachineMetadata=role=leader
    - name: consul-announcer.service
      command: start
      content: |
        [Unit]
        Description=Consul Server Announcer
        PartOf=consul.service
        After=consul.service
        [Service]
        RestartSec=30s
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStart=/bin/sh -c "while true; do \
          etcdctl set /consul/bootstrap/machines/$(cat /etc/machine-id) $COREOS_PRIVATE_IPV4 --ttl 60;\
          /usr/bin/docker exec consul consul join $(etcdctl get $(etcdctl ls /consul/bootstrap/machines | tail -1)); sleep 45;\
        done"
        ExecStop=/bin/sh -c "/usr/bin/etcdctl rm /consul/bootstrap/machines/$(cat /etc/machine-id)"
        SyslogIdentifier=%p
        [X-Fleet]
        Global=true
        MachineMetadata=role=leader
    - name: registrator.service
      command: start
      content: |
        [Unit]
        Description=Service Registrator
        After=consul.service
        [Service]
        TimeoutSec=5m
        RestartSec=3m
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill registrator
        ExecStartPre=-/usr/bin/docker rm registrator
        ExecStartPre=/usr/bin/docker pull gliderlabs/registrator
        ExecStart=/bin/sh -c "exec /usr/bin/docker run \
          --name registrator \
          --hostname %H \
          -v /var/run/docker.sock:/tmp/docker.sock \
          gliderlabs/registrator consul://$COREOS_PRIVATE_IPV4:8500"
        ExecStop=/usr/bin/docker stop registrator
        [X-Fleet]
        Global=true
        MachineMetadata=role=leader
    - name: cadvisor.service
      command: start
      content: |
        [Unit]
        Description=cAdvisor
        After=docker.service
        [Service]
        Restart=on-failure
        ExecStartPre=-/usr/bin/docker kill cadvisor
        ExecStartPre=-/usr/bin/docker rm cadvisor
        ExecStartPre=/usr/bin/docker pull google/cadvisor
        ExecStart=/bin/sh -c "exec /usr/bin/docker run \
          --volume=/:/rootfs:ro \
          --volume=/var/run:/var/run:rw \
          --volume=/sys:/sys:ro \
          --volume=/var/lib/docker/:/var/lib/docker:ro \
          --name=cadvisor \
          -e SERVICE_NAME=cadvisor \
          -p 8080:8080 \
          google/cadvisor"
        ExecStop=/usr/bin/docker stop cadvisor
        [X-Fleet]
        Global=true
        MachineMetadata=role=leader
    - name: haproxy.service
      command: start
      content: |
        [Unit]
        Description=HAProxy Load Balancer
        After=consul.service
        [Service]
        TimeoutSec=1m
        RestartSec=1m
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill haproxy
        ExecStartPre=-/usr/bin/docker rm haproxy
        ExecStartPre=/usr/bin/docker pull cargonauts/consul-haproxy
        ExecStart=/bin/sh -c "exec /usr/bin/docker run \
          --name haproxy \
          --dns 172.17.42.1 \
          --dns 8.8.8.8 \
          --dns-search service.consul \
          -e SERVICE_IGNORE=true \
          -v /haproxy/haproxy.ctmpl:/haproxy.ctmpl \
          -p 80:80 \
          leandrocp/consul-haproxy \
          -consul $COREOS_PRIVATE_IPV4:8500 \
          -template \"/haproxy.ctmpl:/etc/haproxy/haproxy.cfg:service haproxy reload || true\""
        ExecStop=/usr/bin/docker stop haproxy
        [X-Fleet]
        Global=true
        MachineMetadata=role=leader

write_files:
  - path: /etc/systemd/system/docker.service.d/50-dns-params.conf
    content: |
      [Service]
      Environment='DOCKER_OPTS=--insecure-registry 10.0.0.0/16 --dns 172.17.42.1 --dns 8.8.8.8 --dns-search service.consul'
  - path: /haproxy/haproxy.ctmpl
    content: |
      # DO NOT EDIT
      # Generated automatically by consul-template
      global
          maxconn {{or (key "service/haproxy/maxconn") 256}}
          debug

      defaults
          mode http
          timeout connect {{or (key "service/haproxy/timeouts/connect") "5000ms"}}
          timeout client {{or (key "service/haproxy/timeouts/client") "50000ms"}}
          timeout server {{or (key "service/haproxy/timeouts/server") "50000ms"}}
          stats enable
          stats uri /haproxy?stats
          monitor-uri /health_check

      userlist acl_users{{range ls "acl/users"}}
          user {{.Key}} insecure-password {{.Value}}{{end}}

      frontend www
          bind *:80
      
      {{ range services }}{{ $name := .Name }}{{ $publish := key (print "service/" $name "/publish") }}{{ if or (eq $publish "public") (eq $publish "auth") }}
          acl host_{{ $name }} hdr(host) -i {{ or (key (print "service/" $name "/domain")) "invalid-domain" }}
          use_backend {{ $name }}_backend if host_{{ $name }}
      {{ end }}{{ end }}

      {{ range services }}{{ $name := .Name }}{{ $publish := key (print "service/" $name "/publish") }}{{ if (eq $publish "auth") }}
      backend {{ $name }}_backend{{ range service $name }}
          acl acl_auth http_auth(acl_users)
          http-request auth realm Auth if !acl_auth
          server {{ .Node }} {{ .Address }}:{{ .Port }}
      {{ end }}{{ end }}{{ end }}

      {{ range services }}{{ $name := .Name }}{{ $publish := key (print "service/" $name "/publish") }}{{ if (eq $publish "public") }}
      backend {{ $name }}_backend{{ range service $name }}
          server {{ .Node }} {{ .Address }}:{{ .Port }}
      {{ end }}{{ end }}{{ end }}

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0S8+gsgt5N84ejEI5H3rZbRfsmjdiV4IdqC/tLMZYwcJ1lgv1XGqWI1uMat2X1xiprM3+pROGLdcMXhw7OW+milzqgj8axffGVRvDh0jUg2sR2DZNJmb1/Gqubagd0tM8Slb4fUjnA1S2sd3LhplzMcvQ6C64K90U5BpyfpFeHhtxP0VrWh1yqNAsO+m2NMzU34pi3ILI0qW3a5sqXO45e8I0KrewNQqzYWsIxB5IS2Y8g4WwQAIWk+98Nc5RZ25Smzip/npeMx/uGlfbNwZGQvs1tlCmsr0/uNnno79xj6hmd6Z1/h8oXbc9JxU9DoWI1HRNl1PuSpnNrE0tj28pw==
